# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_neuralnet', [dirname(__file__)])
        except ImportError:
            import _neuralnet
            return _neuralnet
        if fp is not None:
            try:
                _mod = imp.load_module('_neuralnet', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _neuralnet = swig_import_helper()
    del swig_import_helper
else:
    import _neuralnet
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _neuralnet.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _neuralnet.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _neuralnet.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _neuralnet.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _neuralnet.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _neuralnet.SwigPyIterator_equal(self, x)

    def copy(self):
        return _neuralnet.SwigPyIterator_copy(self)

    def next(self):
        return _neuralnet.SwigPyIterator_next(self)

    def __next__(self):
        return _neuralnet.SwigPyIterator___next__(self)

    def previous(self):
        return _neuralnet.SwigPyIterator_previous(self)

    def advance(self, n):
        return _neuralnet.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _neuralnet.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _neuralnet.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _neuralnet.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _neuralnet.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _neuralnet.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _neuralnet.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _neuralnet.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class RowF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowF, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neuralnet.RowF_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neuralnet.RowF___nonzero__(self)

    def __bool__(self):
        return _neuralnet.RowF___bool__(self)

    def __len__(self):
        return _neuralnet.RowF___len__(self)

    def __getslice__(self, i, j):
        return _neuralnet.RowF___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neuralnet.RowF___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neuralnet.RowF___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neuralnet.RowF___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neuralnet.RowF___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neuralnet.RowF___setitem__(self, *args)

    def pop(self):
        return _neuralnet.RowF_pop(self)

    def append(self, x):
        return _neuralnet.RowF_append(self, x)

    def empty(self):
        return _neuralnet.RowF_empty(self)

    def size(self):
        return _neuralnet.RowF_size(self)

    def swap(self, v):
        return _neuralnet.RowF_swap(self, v)

    def begin(self):
        return _neuralnet.RowF_begin(self)

    def end(self):
        return _neuralnet.RowF_end(self)

    def rbegin(self):
        return _neuralnet.RowF_rbegin(self)

    def rend(self):
        return _neuralnet.RowF_rend(self)

    def clear(self):
        return _neuralnet.RowF_clear(self)

    def get_allocator(self):
        return _neuralnet.RowF_get_allocator(self)

    def pop_back(self):
        return _neuralnet.RowF_pop_back(self)

    def erase(self, *args):
        return _neuralnet.RowF_erase(self, *args)

    def __init__(self, *args):
        this = _neuralnet.new_RowF(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _neuralnet.RowF_push_back(self, x)

    def front(self):
        return _neuralnet.RowF_front(self)

    def back(self):
        return _neuralnet.RowF_back(self)

    def assign(self, n, x):
        return _neuralnet.RowF_assign(self, n, x)

    def resize(self, *args):
        return _neuralnet.RowF_resize(self, *args)

    def insert(self, *args):
        return _neuralnet.RowF_insert(self, *args)

    def reserve(self, n):
        return _neuralnet.RowF_reserve(self, n)

    def capacity(self):
        return _neuralnet.RowF_capacity(self)
    __swig_destroy__ = _neuralnet.delete_RowF
    __del__ = lambda self: None
RowF_swigregister = _neuralnet.RowF_swigregister
RowF_swigregister(RowF)

class MatrixF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixF, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neuralnet.MatrixF_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neuralnet.MatrixF___nonzero__(self)

    def __bool__(self):
        return _neuralnet.MatrixF___bool__(self)

    def __len__(self):
        return _neuralnet.MatrixF___len__(self)

    def __getslice__(self, i, j):
        return _neuralnet.MatrixF___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neuralnet.MatrixF___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neuralnet.MatrixF___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neuralnet.MatrixF___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neuralnet.MatrixF___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neuralnet.MatrixF___setitem__(self, *args)

    def pop(self):
        return _neuralnet.MatrixF_pop(self)

    def append(self, x):
        return _neuralnet.MatrixF_append(self, x)

    def empty(self):
        return _neuralnet.MatrixF_empty(self)

    def size(self):
        return _neuralnet.MatrixF_size(self)

    def swap(self, v):
        return _neuralnet.MatrixF_swap(self, v)

    def begin(self):
        return _neuralnet.MatrixF_begin(self)

    def end(self):
        return _neuralnet.MatrixF_end(self)

    def rbegin(self):
        return _neuralnet.MatrixF_rbegin(self)

    def rend(self):
        return _neuralnet.MatrixF_rend(self)

    def clear(self):
        return _neuralnet.MatrixF_clear(self)

    def get_allocator(self):
        return _neuralnet.MatrixF_get_allocator(self)

    def pop_back(self):
        return _neuralnet.MatrixF_pop_back(self)

    def erase(self, *args):
        return _neuralnet.MatrixF_erase(self, *args)

    def __init__(self, *args):
        this = _neuralnet.new_MatrixF(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _neuralnet.MatrixF_push_back(self, x)

    def front(self):
        return _neuralnet.MatrixF_front(self)

    def back(self):
        return _neuralnet.MatrixF_back(self)

    def assign(self, n, x):
        return _neuralnet.MatrixF_assign(self, n, x)

    def resize(self, *args):
        return _neuralnet.MatrixF_resize(self, *args)

    def insert(self, *args):
        return _neuralnet.MatrixF_insert(self, *args)

    def reserve(self, n):
        return _neuralnet.MatrixF_reserve(self, n)

    def capacity(self):
        return _neuralnet.MatrixF_capacity(self)
    __swig_destroy__ = _neuralnet.delete_MatrixF
    __del__ = lambda self: None
MatrixF_swigregister = _neuralnet.MatrixF_swigregister
MatrixF_swigregister(MatrixF)

class RowUI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowUI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowUI, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neuralnet.RowUI_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neuralnet.RowUI___nonzero__(self)

    def __bool__(self):
        return _neuralnet.RowUI___bool__(self)

    def __len__(self):
        return _neuralnet.RowUI___len__(self)

    def __getslice__(self, i, j):
        return _neuralnet.RowUI___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neuralnet.RowUI___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neuralnet.RowUI___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neuralnet.RowUI___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neuralnet.RowUI___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neuralnet.RowUI___setitem__(self, *args)

    def pop(self):
        return _neuralnet.RowUI_pop(self)

    def append(self, x):
        return _neuralnet.RowUI_append(self, x)

    def empty(self):
        return _neuralnet.RowUI_empty(self)

    def size(self):
        return _neuralnet.RowUI_size(self)

    def swap(self, v):
        return _neuralnet.RowUI_swap(self, v)

    def begin(self):
        return _neuralnet.RowUI_begin(self)

    def end(self):
        return _neuralnet.RowUI_end(self)

    def rbegin(self):
        return _neuralnet.RowUI_rbegin(self)

    def rend(self):
        return _neuralnet.RowUI_rend(self)

    def clear(self):
        return _neuralnet.RowUI_clear(self)

    def get_allocator(self):
        return _neuralnet.RowUI_get_allocator(self)

    def pop_back(self):
        return _neuralnet.RowUI_pop_back(self)

    def erase(self, *args):
        return _neuralnet.RowUI_erase(self, *args)

    def __init__(self, *args):
        this = _neuralnet.new_RowUI(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _neuralnet.RowUI_push_back(self, x)

    def front(self):
        return _neuralnet.RowUI_front(self)

    def back(self):
        return _neuralnet.RowUI_back(self)

    def assign(self, n, x):
        return _neuralnet.RowUI_assign(self, n, x)

    def resize(self, *args):
        return _neuralnet.RowUI_resize(self, *args)

    def insert(self, *args):
        return _neuralnet.RowUI_insert(self, *args)

    def reserve(self, n):
        return _neuralnet.RowUI_reserve(self, n)

    def capacity(self):
        return _neuralnet.RowUI_capacity(self)
    __swig_destroy__ = _neuralnet.delete_RowUI
    __del__ = lambda self: None
RowUI_swigregister = _neuralnet.RowUI_swigregister
RowUI_swigregister(RowUI)

class MatrixUI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixUI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixUI, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neuralnet.MatrixUI_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neuralnet.MatrixUI___nonzero__(self)

    def __bool__(self):
        return _neuralnet.MatrixUI___bool__(self)

    def __len__(self):
        return _neuralnet.MatrixUI___len__(self)

    def __getslice__(self, i, j):
        return _neuralnet.MatrixUI___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neuralnet.MatrixUI___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neuralnet.MatrixUI___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neuralnet.MatrixUI___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neuralnet.MatrixUI___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neuralnet.MatrixUI___setitem__(self, *args)

    def pop(self):
        return _neuralnet.MatrixUI_pop(self)

    def append(self, x):
        return _neuralnet.MatrixUI_append(self, x)

    def empty(self):
        return _neuralnet.MatrixUI_empty(self)

    def size(self):
        return _neuralnet.MatrixUI_size(self)

    def swap(self, v):
        return _neuralnet.MatrixUI_swap(self, v)

    def begin(self):
        return _neuralnet.MatrixUI_begin(self)

    def end(self):
        return _neuralnet.MatrixUI_end(self)

    def rbegin(self):
        return _neuralnet.MatrixUI_rbegin(self)

    def rend(self):
        return _neuralnet.MatrixUI_rend(self)

    def clear(self):
        return _neuralnet.MatrixUI_clear(self)

    def get_allocator(self):
        return _neuralnet.MatrixUI_get_allocator(self)

    def pop_back(self):
        return _neuralnet.MatrixUI_pop_back(self)

    def erase(self, *args):
        return _neuralnet.MatrixUI_erase(self, *args)

    def __init__(self, *args):
        this = _neuralnet.new_MatrixUI(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _neuralnet.MatrixUI_push_back(self, x)

    def front(self):
        return _neuralnet.MatrixUI_front(self)

    def back(self):
        return _neuralnet.MatrixUI_back(self)

    def assign(self, n, x):
        return _neuralnet.MatrixUI_assign(self, n, x)

    def resize(self, *args):
        return _neuralnet.MatrixUI_resize(self, *args)

    def insert(self, *args):
        return _neuralnet.MatrixUI_insert(self, *args)

    def reserve(self, n):
        return _neuralnet.MatrixUI_reserve(self, n)

    def capacity(self):
        return _neuralnet.MatrixUI_capacity(self)
    __swig_destroy__ = _neuralnet.delete_MatrixUI
    __del__ = lambda self: None
MatrixUI_swigregister = _neuralnet.MatrixUI_swigregister
MatrixUI_swigregister(MatrixUI)

class RowI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowI, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neuralnet.RowI_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neuralnet.RowI___nonzero__(self)

    def __bool__(self):
        return _neuralnet.RowI___bool__(self)

    def __len__(self):
        return _neuralnet.RowI___len__(self)

    def __getslice__(self, i, j):
        return _neuralnet.RowI___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neuralnet.RowI___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neuralnet.RowI___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neuralnet.RowI___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neuralnet.RowI___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neuralnet.RowI___setitem__(self, *args)

    def pop(self):
        return _neuralnet.RowI_pop(self)

    def append(self, x):
        return _neuralnet.RowI_append(self, x)

    def empty(self):
        return _neuralnet.RowI_empty(self)

    def size(self):
        return _neuralnet.RowI_size(self)

    def swap(self, v):
        return _neuralnet.RowI_swap(self, v)

    def begin(self):
        return _neuralnet.RowI_begin(self)

    def end(self):
        return _neuralnet.RowI_end(self)

    def rbegin(self):
        return _neuralnet.RowI_rbegin(self)

    def rend(self):
        return _neuralnet.RowI_rend(self)

    def clear(self):
        return _neuralnet.RowI_clear(self)

    def get_allocator(self):
        return _neuralnet.RowI_get_allocator(self)

    def pop_back(self):
        return _neuralnet.RowI_pop_back(self)

    def erase(self, *args):
        return _neuralnet.RowI_erase(self, *args)

    def __init__(self, *args):
        this = _neuralnet.new_RowI(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _neuralnet.RowI_push_back(self, x)

    def front(self):
        return _neuralnet.RowI_front(self)

    def back(self):
        return _neuralnet.RowI_back(self)

    def assign(self, n, x):
        return _neuralnet.RowI_assign(self, n, x)

    def resize(self, *args):
        return _neuralnet.RowI_resize(self, *args)

    def insert(self, *args):
        return _neuralnet.RowI_insert(self, *args)

    def reserve(self, n):
        return _neuralnet.RowI_reserve(self, n)

    def capacity(self):
        return _neuralnet.RowI_capacity(self)
    __swig_destroy__ = _neuralnet.delete_RowI
    __del__ = lambda self: None
RowI_swigregister = _neuralnet.RowI_swigregister
RowI_swigregister(RowI)

class MatrixI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixI, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _neuralnet.MatrixI_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _neuralnet.MatrixI___nonzero__(self)

    def __bool__(self):
        return _neuralnet.MatrixI___bool__(self)

    def __len__(self):
        return _neuralnet.MatrixI___len__(self)

    def __getslice__(self, i, j):
        return _neuralnet.MatrixI___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _neuralnet.MatrixI___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _neuralnet.MatrixI___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _neuralnet.MatrixI___delitem__(self, *args)

    def __getitem__(self, *args):
        return _neuralnet.MatrixI___getitem__(self, *args)

    def __setitem__(self, *args):
        return _neuralnet.MatrixI___setitem__(self, *args)

    def pop(self):
        return _neuralnet.MatrixI_pop(self)

    def append(self, x):
        return _neuralnet.MatrixI_append(self, x)

    def empty(self):
        return _neuralnet.MatrixI_empty(self)

    def size(self):
        return _neuralnet.MatrixI_size(self)

    def swap(self, v):
        return _neuralnet.MatrixI_swap(self, v)

    def begin(self):
        return _neuralnet.MatrixI_begin(self)

    def end(self):
        return _neuralnet.MatrixI_end(self)

    def rbegin(self):
        return _neuralnet.MatrixI_rbegin(self)

    def rend(self):
        return _neuralnet.MatrixI_rend(self)

    def clear(self):
        return _neuralnet.MatrixI_clear(self)

    def get_allocator(self):
        return _neuralnet.MatrixI_get_allocator(self)

    def pop_back(self):
        return _neuralnet.MatrixI_pop_back(self)

    def erase(self, *args):
        return _neuralnet.MatrixI_erase(self, *args)

    def __init__(self, *args):
        this = _neuralnet.new_MatrixI(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _neuralnet.MatrixI_push_back(self, x)

    def front(self):
        return _neuralnet.MatrixI_front(self)

    def back(self):
        return _neuralnet.MatrixI_back(self)

    def assign(self, n, x):
        return _neuralnet.MatrixI_assign(self, n, x)

    def resize(self, *args):
        return _neuralnet.MatrixI_resize(self, *args)

    def insert(self, *args):
        return _neuralnet.MatrixI_insert(self, *args)

    def reserve(self, n):
        return _neuralnet.MatrixI_reserve(self, n)

    def capacity(self):
        return _neuralnet.MatrixI_capacity(self)
    __swig_destroy__ = _neuralnet.delete_MatrixI
    __del__ = lambda self: None
MatrixI_swigregister = _neuralnet.MatrixI_swigregister
MatrixI_swigregister(MatrixI)

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _neuralnet.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _neuralnet.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _neuralnet.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _neuralnet.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _neuralnet.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _neuralnet.doubleArray_frompointer
    if _newclass:
        frompointer = staticmethod(_neuralnet.doubleArray_frompointer)
doubleArray_swigregister = _neuralnet.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _neuralnet.doubleArray_frompointer(t)
doubleArray_frompointer = _neuralnet.doubleArray_frompointer

class NeuralNet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeuralNet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeuralNet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neuralnet.new_NeuralNet(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def copy(self, *args):
        return _neuralnet.NeuralNet_copy(self, *args)

    def merge(self, arg2):
        return _neuralnet.NeuralNet_merge(self, arg2)

    def initialize(self, arg2, arg3):
        return _neuralnet.NeuralNet_initialize(self, arg2, arg3)

    def init_weights(self, arg2, arg3):
        return _neuralnet.NeuralNet_init_weights(self, arg2, arg3)

    def feedforward(self, *args):
        return _neuralnet.NeuralNet_feedforward(self, *args)
    __swig_setmethods__["str_funcs"] = _neuralnet.NeuralNet_str_funcs_set
    __swig_getmethods__["str_funcs"] = _neuralnet.NeuralNet_str_funcs_get
    if _newclass:
        str_funcs = _swig_property(_neuralnet.NeuralNet_str_funcs_get, _neuralnet.NeuralNet_str_funcs_set)
    __swig_setmethods__["str_nodes"] = _neuralnet.NeuralNet_str_nodes_set
    __swig_getmethods__["str_nodes"] = _neuralnet.NeuralNet_str_nodes_get
    if _newclass:
        str_nodes = _swig_property(_neuralnet.NeuralNet_str_nodes_get, _neuralnet.NeuralNet_str_nodes_set)

    def _print(self):
        return _neuralnet.NeuralNet__print(self)

    def print_weights(self):
        return _neuralnet.NeuralNet_print_weights(self)

    def getNLayers(self):
        return _neuralnet.NeuralNet_getNLayers(self)

    def getNNodes(self, arg2):
        return _neuralnet.NeuralNet_getNNodes(self, arg2)

    def getWeight(self, i, j, k):
        return _neuralnet.NeuralNet_getWeight(self, i, j, k)

    def getBias(self, i, j):
        return _neuralnet.NeuralNet_getBias(self, i, j)

    def getUseWeight(self, i, j, k):
        return _neuralnet.NeuralNet_getUseWeight(self, i, j, k)

    def getUseBias(self, i, j):
        return _neuralnet.NeuralNet_getUseBias(self, i, j)

    def isFrozenNode(self, arg2, arg3):
        return _neuralnet.NeuralNet_isFrozenNode(self, arg2, arg3)

    def setWeight(self, i, j, k, val):
        return _neuralnet.NeuralNet_setWeight(self, i, j, k, val)

    def setBias(self, i, j, val):
        return _neuralnet.NeuralNet_setBias(self, i, j, val)

    def setUseBias(self, *args):
        return _neuralnet.NeuralNet_setUseBias(self, *args)

    def setUseWeights(self, *args):
        return _neuralnet.NeuralNet_setUseWeights(self, *args)

    def disconnectInput(self, arg2):
        return _neuralnet.NeuralNet_disconnectInput(self, arg2)

    def setActFunc(self, *args):
        return _neuralnet.NeuralNet_setActFunc(self, *args)

    def setFrozen(self, *args):
        return _neuralnet.NeuralNet_setFrozen(self, *args)

    def isUsingBias(self, *args):
        return _neuralnet.NeuralNet_isUsingBias(self, *args)
    __swig_destroy__ = _neuralnet.delete_NeuralNet
    __del__ = lambda self: None
NeuralNet_swigregister = _neuralnet.NeuralNet_swigregister
NeuralNet_swigregister(NeuralNet)

class Backpropagation(NeuralNet):
    __swig_setmethods__ = {}
    for _s in [NeuralNet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Backpropagation, name, value)
    __swig_getmethods__ = {}
    for _s in [NeuralNet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Backpropagation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lrn_rate"] = _neuralnet.Backpropagation_lrn_rate_set
    __swig_getmethods__["lrn_rate"] = _neuralnet.Backpropagation_lrn_rate_get
    if _newclass:
        lrn_rate = _swig_property(_neuralnet.Backpropagation_lrn_rate_get, _neuralnet.Backpropagation_lrn_rate_set)
    __swig_setmethods__["momentum"] = _neuralnet.Backpropagation_momentum_set
    __swig_getmethods__["momentum"] = _neuralnet.Backpropagation_momentum_get
    if _newclass:
        momentum = _swig_property(_neuralnet.Backpropagation_momentum_get, _neuralnet.Backpropagation_momentum_set)

    def __init__(self, *args):
        this = _neuralnet.new_Backpropagation(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def copy(self, *args):
        return _neuralnet.Backpropagation_copy(self, *args)

    def _print(self):
        return _neuralnet.Backpropagation__print(self)
    __swig_destroy__ = _neuralnet.delete_Backpropagation
    __del__ = lambda self: None
Backpropagation_swigregister = _neuralnet.Backpropagation_swigregister
Backpropagation_swigregister(Backpropagation)

class RProp(Backpropagation):
    __swig_setmethods__ = {}
    for _s in [Backpropagation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RProp, name, value)
    __swig_getmethods__ = {}
    for _s in [Backpropagation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RProp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["delta_max"] = _neuralnet.RProp_delta_max_set
    __swig_getmethods__["delta_max"] = _neuralnet.RProp_delta_max_get
    if _newclass:
        delta_max = _swig_property(_neuralnet.RProp_delta_max_get, _neuralnet.RProp_delta_max_set)
    __swig_setmethods__["delta_min"] = _neuralnet.RProp_delta_min_set
    __swig_getmethods__["delta_min"] = _neuralnet.RProp_delta_min_get
    if _newclass:
        delta_min = _swig_property(_neuralnet.RProp_delta_min_get, _neuralnet.RProp_delta_min_set)
    __swig_setmethods__["inc_eta"] = _neuralnet.RProp_inc_eta_set
    __swig_getmethods__["inc_eta"] = _neuralnet.RProp_inc_eta_get
    if _newclass:
        inc_eta = _swig_property(_neuralnet.RProp_inc_eta_get, _neuralnet.RProp_inc_eta_set)
    __swig_setmethods__["dec_eta"] = _neuralnet.RProp_dec_eta_set
    __swig_getmethods__["dec_eta"] = _neuralnet.RProp_dec_eta_get
    if _newclass:
        dec_eta = _swig_property(_neuralnet.RProp_dec_eta_get, _neuralnet.RProp_dec_eta_set)
    __swig_setmethods__["init_eta"] = _neuralnet.RProp_init_eta_set
    __swig_getmethods__["init_eta"] = _neuralnet.RProp_init_eta_get
    if _newclass:
        init_eta = _swig_property(_neuralnet.RProp_init_eta_get, _neuralnet.RProp_init_eta_set)

    def __init__(self, *args):
        this = _neuralnet.new_RProp(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def copy(self, *args):
        return _neuralnet.RProp_copy(self, *args)

    def _print(self):
        return _neuralnet.RProp__print(self)
    __swig_destroy__ = _neuralnet.delete_RProp
    __del__ = lambda self: None
RProp_swigregister = _neuralnet.RProp_swigregister
RProp_swigregister(RProp)

class IOMgr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOMgr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOMgr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neuralnet.new_IOMgr()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _neuralnet.delete_IOMgr
    __del__ = lambda self: None

    def trn_size(self):
        return _neuralnet.IOMgr_trn_size(self)

    def val_size(self):
        return _neuralnet.IOMgr_val_size(self)

    def tst_size(self):
        return _neuralnet.IOMgr_tst_size(self)

    def shuffle(self):
        return _neuralnet.IOMgr_shuffle(self)

    def data(self):
        return _neuralnet.IOMgr_data(self)

    def target(self):
        return _neuralnet.IOMgr_target(self)

    def set_trn(self, arg2):
        return _neuralnet.IOMgr_set_trn(self, arg2)

    def set_val(self, arg2):
        return _neuralnet.IOMgr_set_val(self, arg2)

    def set_tst(self, arg2):
        return _neuralnet.IOMgr_set_tst(self, arg2)

    def get_trn(self):
        return _neuralnet.IOMgr_get_trn(self)

    def get_val(self):
        return _neuralnet.IOMgr_get_val(self)

    def get_tst(self):
        return _neuralnet.IOMgr_get_tst(self)
    __swig_setmethods__["in_dim"] = _neuralnet.IOMgr_in_dim_set
    __swig_getmethods__["in_dim"] = _neuralnet.IOMgr_in_dim_get
    if _newclass:
        in_dim = _swig_property(_neuralnet.IOMgr_in_dim_get, _neuralnet.IOMgr_in_dim_set)
    __swig_setmethods__["out_dim"] = _neuralnet.IOMgr_out_dim_set
    __swig_getmethods__["out_dim"] = _neuralnet.IOMgr_out_dim_get
    if _newclass:
        out_dim = _swig_property(_neuralnet.IOMgr_out_dim_get, _neuralnet.IOMgr_out_dim_set)
    __swig_setmethods__["evt_dim"] = _neuralnet.IOMgr_evt_dim_set
    __swig_getmethods__["evt_dim"] = _neuralnet.IOMgr_evt_dim_get
    if _newclass:
        evt_dim = _swig_property(_neuralnet.IOMgr_evt_dim_get, _neuralnet.IOMgr_evt_dim_set)

    def initialize(self, arg2, arg3):
        return _neuralnet.IOMgr_initialize(self, arg2, arg3)
IOMgr_swigregister = _neuralnet.IOMgr_swigregister
IOMgr_swigregister(IOMgr)

class TrnInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrnInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrnInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neuralnet.new_TrnInfo(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["epoch"] = _neuralnet.TrnInfo_epoch_set
    __swig_getmethods__["epoch"] = _neuralnet.TrnInfo_epoch_get
    if _newclass:
        epoch = _swig_property(_neuralnet.TrnInfo_epoch_get, _neuralnet.TrnInfo_epoch_set)
    __swig_setmethods__["mse_trn"] = _neuralnet.TrnInfo_mse_trn_set
    __swig_getmethods__["mse_trn"] = _neuralnet.TrnInfo_mse_trn_get
    if _newclass:
        mse_trn = _swig_property(_neuralnet.TrnInfo_mse_trn_get, _neuralnet.TrnInfo_mse_trn_set)
    __swig_setmethods__["mse_val"] = _neuralnet.TrnInfo_mse_val_set
    __swig_getmethods__["mse_val"] = _neuralnet.TrnInfo_mse_val_get
    if _newclass:
        mse_val = _swig_property(_neuralnet.TrnInfo_mse_val_get, _neuralnet.TrnInfo_mse_val_set)
    __swig_setmethods__["mse_tst"] = _neuralnet.TrnInfo_mse_tst_set
    __swig_getmethods__["mse_tst"] = _neuralnet.TrnInfo_mse_tst_get
    if _newclass:
        mse_tst = _swig_property(_neuralnet.TrnInfo_mse_tst_get, _neuralnet.TrnInfo_mse_tst_set)
    __swig_setmethods__["bst_epoch"] = _neuralnet.TrnInfo_bst_epoch_set
    __swig_getmethods__["bst_epoch"] = _neuralnet.TrnInfo_bst_epoch_get
    if _newclass:
        bst_epoch = _swig_property(_neuralnet.TrnInfo_bst_epoch_get, _neuralnet.TrnInfo_bst_epoch_set)
    __swig_setmethods__["perfType"] = _neuralnet.TrnInfo_perfType_set
    __swig_getmethods__["perfType"] = _neuralnet.TrnInfo_perfType_get
    if _newclass:
        perfType = _swig_property(_neuralnet.TrnInfo_perfType_get, _neuralnet.TrnInfo_perfType_set)

    def is_better(self, *args):
        return _neuralnet.TrnInfo_is_better(self, *args)

    def performance(self, *args):
        return _neuralnet.TrnInfo_performance(self, *args)

    def getNVar(self):
        return _neuralnet.TrnInfo_getNVar(self)

    def getVarAddr(self, i):
        return _neuralnet.TrnInfo_getVarAddr(self, i)

    def getVarName(self, i):
        return _neuralnet.TrnInfo_getVarName(self, i)
    __swig_destroy__ = _neuralnet.delete_TrnInfo
    __del__ = lambda self: None
TrnInfo_swigregister = _neuralnet.TrnInfo_swigregister
TrnInfo_swigregister(TrnInfo)

class TrnInfo_Pattern(TrnInfo):
    __swig_setmethods__ = {}
    for _s in [TrnInfo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrnInfo_Pattern, name, value)
    __swig_getmethods__ = {}
    for _s in [TrnInfo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrnInfo_Pattern, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neuralnet.new_TrnInfo_Pattern(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def copy(self, trn):
        return _neuralnet.TrnInfo_Pattern_copy(self, trn)

    def performance(self, *args):
        return _neuralnet.TrnInfo_Pattern_performance(self, *args)
    __swig_setmethods__["mse_trn_c"] = _neuralnet.TrnInfo_Pattern_mse_trn_c_set
    __swig_getmethods__["mse_trn_c"] = _neuralnet.TrnInfo_Pattern_mse_trn_c_get
    if _newclass:
        mse_trn_c = _swig_property(_neuralnet.TrnInfo_Pattern_mse_trn_c_get, _neuralnet.TrnInfo_Pattern_mse_trn_c_set)
    __swig_setmethods__["mse_val_c"] = _neuralnet.TrnInfo_Pattern_mse_val_c_set
    __swig_getmethods__["mse_val_c"] = _neuralnet.TrnInfo_Pattern_mse_val_c_get
    if _newclass:
        mse_val_c = _swig_property(_neuralnet.TrnInfo_Pattern_mse_val_c_get, _neuralnet.TrnInfo_Pattern_mse_val_c_set)
    __swig_setmethods__["mse_tst_c"] = _neuralnet.TrnInfo_Pattern_mse_tst_c_set
    __swig_getmethods__["mse_tst_c"] = _neuralnet.TrnInfo_Pattern_mse_tst_c_get
    if _newclass:
        mse_tst_c = _swig_property(_neuralnet.TrnInfo_Pattern_mse_tst_c_get, _neuralnet.TrnInfo_Pattern_mse_tst_c_set)
    __swig_setmethods__["tot_trn"] = _neuralnet.TrnInfo_Pattern_tot_trn_set
    __swig_getmethods__["tot_trn"] = _neuralnet.TrnInfo_Pattern_tot_trn_get
    if _newclass:
        tot_trn = _swig_property(_neuralnet.TrnInfo_Pattern_tot_trn_get, _neuralnet.TrnInfo_Pattern_tot_trn_set)
    __swig_setmethods__["tot_val"] = _neuralnet.TrnInfo_Pattern_tot_val_set
    __swig_getmethods__["tot_val"] = _neuralnet.TrnInfo_Pattern_tot_val_get
    if _newclass:
        tot_val = _swig_property(_neuralnet.TrnInfo_Pattern_tot_val_get, _neuralnet.TrnInfo_Pattern_tot_val_set)
    __swig_setmethods__["tot_tst"] = _neuralnet.TrnInfo_Pattern_tot_tst_set
    __swig_getmethods__["tot_tst"] = _neuralnet.TrnInfo_Pattern_tot_tst_get
    if _newclass:
        tot_tst = _swig_property(_neuralnet.TrnInfo_Pattern_tot_tst_get, _neuralnet.TrnInfo_Pattern_tot_tst_set)
    __swig_setmethods__["sp_trn"] = _neuralnet.TrnInfo_Pattern_sp_trn_set
    __swig_getmethods__["sp_trn"] = _neuralnet.TrnInfo_Pattern_sp_trn_get
    if _newclass:
        sp_trn = _swig_property(_neuralnet.TrnInfo_Pattern_sp_trn_get, _neuralnet.TrnInfo_Pattern_sp_trn_set)
    __swig_setmethods__["sp_val"] = _neuralnet.TrnInfo_Pattern_sp_val_set
    __swig_getmethods__["sp_val"] = _neuralnet.TrnInfo_Pattern_sp_val_get
    if _newclass:
        sp_val = _swig_property(_neuralnet.TrnInfo_Pattern_sp_val_get, _neuralnet.TrnInfo_Pattern_sp_val_set)
    __swig_setmethods__["sp_tst"] = _neuralnet.TrnInfo_Pattern_sp_tst_set
    __swig_getmethods__["sp_tst"] = _neuralnet.TrnInfo_Pattern_sp_tst_get
    if _newclass:
        sp_tst = _swig_property(_neuralnet.TrnInfo_Pattern_sp_tst_get, _neuralnet.TrnInfo_Pattern_sp_tst_set)
    __swig_setmethods__["eff_trn"] = _neuralnet.TrnInfo_Pattern_eff_trn_set
    __swig_getmethods__["eff_trn"] = _neuralnet.TrnInfo_Pattern_eff_trn_get
    if _newclass:
        eff_trn = _swig_property(_neuralnet.TrnInfo_Pattern_eff_trn_get, _neuralnet.TrnInfo_Pattern_eff_trn_set)
    __swig_setmethods__["eff_val"] = _neuralnet.TrnInfo_Pattern_eff_val_set
    __swig_getmethods__["eff_val"] = _neuralnet.TrnInfo_Pattern_eff_val_get
    if _newclass:
        eff_val = _swig_property(_neuralnet.TrnInfo_Pattern_eff_val_get, _neuralnet.TrnInfo_Pattern_eff_val_set)
    __swig_setmethods__["eff_tst"] = _neuralnet.TrnInfo_Pattern_eff_tst_set
    __swig_getmethods__["eff_tst"] = _neuralnet.TrnInfo_Pattern_eff_tst_get
    if _newclass:
        eff_tst = _swig_property(_neuralnet.TrnInfo_Pattern_eff_tst_get, _neuralnet.TrnInfo_Pattern_eff_tst_set)
    __swig_setmethods__["fa_trn"] = _neuralnet.TrnInfo_Pattern_fa_trn_set
    __swig_getmethods__["fa_trn"] = _neuralnet.TrnInfo_Pattern_fa_trn_get
    if _newclass:
        fa_trn = _swig_property(_neuralnet.TrnInfo_Pattern_fa_trn_get, _neuralnet.TrnInfo_Pattern_fa_trn_set)
    __swig_setmethods__["fa_val"] = _neuralnet.TrnInfo_Pattern_fa_val_set
    __swig_getmethods__["fa_val"] = _neuralnet.TrnInfo_Pattern_fa_val_get
    if _newclass:
        fa_val = _swig_property(_neuralnet.TrnInfo_Pattern_fa_val_get, _neuralnet.TrnInfo_Pattern_fa_val_set)
    __swig_setmethods__["fa_tst"] = _neuralnet.TrnInfo_Pattern_fa_tst_set
    __swig_getmethods__["fa_tst"] = _neuralnet.TrnInfo_Pattern_fa_tst_get
    if _newclass:
        fa_tst = _swig_property(_neuralnet.TrnInfo_Pattern_fa_tst_get, _neuralnet.TrnInfo_Pattern_fa_tst_set)
    __swig_destroy__ = _neuralnet.delete_TrnInfo_Pattern
    __del__ = lambda self: None
TrnInfo_Pattern_swigregister = _neuralnet.TrnInfo_Pattern_swigregister
TrnInfo_Pattern_swigregister(TrnInfo_Pattern)

class Trainbp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trainbp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trainbp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neuralnet.new_Trainbp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def initialize(self):
        return _neuralnet.Trainbp_initialize(self)

    def train(self):
        return _neuralnet.Trainbp_train(self)
    __swig_setmethods__["fbatch"] = _neuralnet.Trainbp_fbatch_set
    __swig_getmethods__["fbatch"] = _neuralnet.Trainbp_fbatch_get
    if _newclass:
        fbatch = _swig_property(_neuralnet.Trainbp_fbatch_get, _neuralnet.Trainbp_fbatch_set)
    __swig_setmethods__["nshow"] = _neuralnet.Trainbp_nshow_set
    __swig_getmethods__["nshow"] = _neuralnet.Trainbp_nshow_get
    if _newclass:
        nshow = _swig_property(_neuralnet.Trainbp_nshow_get, _neuralnet.Trainbp_nshow_set)
    __swig_setmethods__["nepochs"] = _neuralnet.Trainbp_nepochs_set
    __swig_getmethods__["nepochs"] = _neuralnet.Trainbp_nepochs_get
    if _newclass:
        nepochs = _swig_property(_neuralnet.Trainbp_nepochs_get, _neuralnet.Trainbp_nepochs_set)
    __swig_setmethods__["min_epochs"] = _neuralnet.Trainbp_min_epochs_set
    __swig_getmethods__["min_epochs"] = _neuralnet.Trainbp_min_epochs_get
    if _newclass:
        min_epochs = _swig_property(_neuralnet.Trainbp_min_epochs_get, _neuralnet.Trainbp_min_epochs_set)
    __swig_setmethods__["goal"] = _neuralnet.Trainbp_goal_set
    __swig_getmethods__["goal"] = _neuralnet.Trainbp_goal_get
    if _newclass:
        goal = _swig_property(_neuralnet.Trainbp_goal_get, _neuralnet.Trainbp_goal_set)
    __swig_setmethods__["max_fail"] = _neuralnet.Trainbp_max_fail_set
    __swig_getmethods__["max_fail"] = _neuralnet.Trainbp_max_fail_get
    if _newclass:
        max_fail = _swig_property(_neuralnet.Trainbp_max_fail_get, _neuralnet.Trainbp_max_fail_set)
    __swig_setmethods__["net_task"] = _neuralnet.Trainbp_net_task_set
    __swig_getmethods__["net_task"] = _neuralnet.Trainbp_net_task_get
    if _newclass:
        net_task = _swig_property(_neuralnet.Trainbp_net_task_get, _neuralnet.Trainbp_net_task_set)

    def set_net(self, arg2):
        return _neuralnet.Trainbp_set_net(self, arg2)

    def get_net(self):
        return _neuralnet.Trainbp_get_net(self)

    def get_trninfo(self):
        return _neuralnet.Trainbp_get_trninfo(self)

    def set_iomgr(self, mgr):
        return _neuralnet.Trainbp_set_iomgr(self, mgr)

    def get_iomgr(self):
        return _neuralnet.Trainbp_get_iomgr(self)
    __swig_destroy__ = _neuralnet.delete_Trainbp
    __del__ = lambda self: None
Trainbp_swigregister = _neuralnet.Trainbp_swigregister
Trainbp_swigregister(Trainbp)

class ARTNet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARTNet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ARTNet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _neuralnet.new_ARTNet(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["neurons"] = _neuralnet.ARTNet_neurons_set
    __swig_getmethods__["neurons"] = _neuralnet.ARTNet_neurons_get
    if _newclass:
        neurons = _swig_property(_neuralnet.ARTNet_neurons_get, _neuralnet.ARTNet_neurons_set)
    __swig_setmethods__["radius"] = _neuralnet.ARTNet_radius_set
    __swig_getmethods__["radius"] = _neuralnet.ARTNet_radius_get
    if _newclass:
        radius = _swig_property(_neuralnet.ARTNet_radius_get, _neuralnet.ARTNet_radius_set)
    __swig_setmethods__["classes"] = _neuralnet.ARTNet_classes_set
    __swig_getmethods__["classes"] = _neuralnet.ARTNet_classes_get
    if _newclass:
        classes = _swig_property(_neuralnet.ARTNet_classes_get, _neuralnet.ARTNet_classes_set)
    __swig_setmethods__["centroids"] = _neuralnet.ARTNet_centroids_set
    __swig_getmethods__["centroids"] = _neuralnet.ARTNet_centroids_get
    if _newclass:
        centroids = _swig_property(_neuralnet.ARTNet_centroids_get, _neuralnet.ARTNet_centroids_set)
    __swig_setmethods__["sim_function"] = _neuralnet.ARTNet_sim_function_set
    __swig_getmethods__["sim_function"] = _neuralnet.ARTNet_sim_function_get
    if _newclass:
        sim_function = _swig_property(_neuralnet.ARTNet_sim_function_get, _neuralnet.ARTNet_sim_function_set)

    def clone(self):
        return _neuralnet.ARTNet_clone(self)

    def feedforward(self, *args):
        return _neuralnet.ARTNet_feedforward(self, *args)

    def initialize(self):
        return _neuralnet.ARTNet_initialize(self)

    def setNeuron(self, i, j, val):
        return _neuralnet.ARTNet_setNeuron(self, i, j, val)

    def setNeuronRadius(self, i, val):
        return _neuralnet.ARTNet_setNeuronRadius(self, i, val)

    def setNeuronClass(self, i, val):
        return _neuralnet.ARTNet_setNeuronClass(self, i, val)

    def setCentroid(self, i, j, val):
        return _neuralnet.ARTNet_setCentroid(self, i, j, val)

    def setNumberOfNeurons(self, n):
        return _neuralnet.ARTNet_setNumberOfNeurons(self, n)

    def setNumberOfClasses(self, n):
        return _neuralnet.ARTNet_setNumberOfClasses(self, n)

    def setMaxNumberOfNeurons(self, n):
        return _neuralnet.ARTNet_setMaxNumberOfNeurons(self, n)

    def setNumberOfDimensions(self, n):
        return _neuralnet.ARTNet_setNumberOfDimensions(self, n)

    def get_neurons(self, W):
        return _neuralnet.ARTNet_get_neurons(self, W)

    def get_classes(self, W):
        return _neuralnet.ARTNet_get_classes(self, W)

    def get_radius(self, W):
        return _neuralnet.ARTNet_get_radius(self, W)

    def get_centroids(self, W):
        return _neuralnet.ARTNet_get_centroids(self, W)

    def get_neuron_hits(self, W):
        return _neuralnet.ARTNet_get_neuron_hits(self, W)

    def get_neuron_class_freq(self, W):
        return _neuralnet.ARTNet_get_neuron_class_freq(self, W)

    def get_neuron_class_hits(self, W):
        return _neuralnet.ARTNet_get_neuron_class_hits(self, W)

    def getNumberOfNeurons(self):
        return _neuralnet.ARTNet_getNumberOfNeurons(self)

    def getMaxNumberOfNeurons(self):
        return _neuralnet.ARTNet_getMaxNumberOfNeurons(self)

    def getNumberOfClasses(self):
        return _neuralnet.ARTNet_getNumberOfClasses(self)

    def getNumberOfDimensions(self):
        return _neuralnet.ARTNet_getNumberOfDimensions(self)

    def classify(self, x, score, ineuron, prediction):
        return _neuralnet.ARTNet_classify(self, x, score, ineuron, prediction)
    __swig_destroy__ = _neuralnet.delete_ARTNet
    __del__ = lambda self: None
ARTNet_swigregister = _neuralnet.ARTNet_swigregister
ARTNet_swigregister(ARTNet)

class Trainart(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trainart, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trainart, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _neuralnet.new_Trainart()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def initialize(self):
        return _neuralnet.Trainart_initialize(self)

    def train(self):
        return _neuralnet.Trainart_train(self)

    def recolor(self, data, target):
        return _neuralnet.Trainart_recolor(self, data, target)
    __swig_setmethods__["trn_eta"] = _neuralnet.Trainart_trn_eta_set
    __swig_getmethods__["trn_eta"] = _neuralnet.Trainart_trn_eta_get
    if _newclass:
        trn_eta = _swig_property(_neuralnet.Trainart_trn_eta_get, _neuralnet.Trainart_trn_eta_set)
    __swig_setmethods__["trn_eta_decay"] = _neuralnet.Trainart_trn_eta_decay_set
    __swig_getmethods__["trn_eta_decay"] = _neuralnet.Trainart_trn_eta_decay_get
    if _newclass:
        trn_eta_decay = _swig_property(_neuralnet.Trainart_trn_eta_decay_get, _neuralnet.Trainart_trn_eta_decay_set)
    __swig_setmethods__["trn_mem_n_it"] = _neuralnet.Trainart_trn_mem_n_it_set
    __swig_getmethods__["trn_mem_n_it"] = _neuralnet.Trainart_trn_mem_n_it_get
    if _newclass:
        trn_mem_n_it = _swig_property(_neuralnet.Trainart_trn_mem_n_it_get, _neuralnet.Trainart_trn_mem_n_it_set)
    __swig_setmethods__["trn_nshow"] = _neuralnet.Trainart_trn_nshow_set
    __swig_getmethods__["trn_nshow"] = _neuralnet.Trainart_trn_nshow_get
    if _newclass:
        trn_nshow = _swig_property(_neuralnet.Trainart_trn_nshow_get, _neuralnet.Trainart_trn_nshow_set)
    __swig_setmethods__["trn_tol"] = _neuralnet.Trainart_trn_tol_set
    __swig_getmethods__["trn_tol"] = _neuralnet.Trainart_trn_tol_get
    if _newclass:
        trn_tol = _swig_property(_neuralnet.Trainart_trn_tol_get, _neuralnet.Trainart_trn_tol_set)
    __swig_setmethods__["trn_max_it"] = _neuralnet.Trainart_trn_max_it_set
    __swig_getmethods__["trn_max_it"] = _neuralnet.Trainart_trn_max_it_get
    if _newclass:
        trn_max_it = _swig_property(_neuralnet.Trainart_trn_max_it_get, _neuralnet.Trainart_trn_max_it_set)
    __swig_setmethods__["trn_max_stall"] = _neuralnet.Trainart_trn_max_stall_set
    __swig_getmethods__["trn_max_stall"] = _neuralnet.Trainart_trn_max_stall_get
    if _newclass:
        trn_max_stall = _swig_property(_neuralnet.Trainart_trn_max_stall_get, _neuralnet.Trainart_trn_max_stall_set)
    __swig_setmethods__["trn_max_no_new_neuron"] = _neuralnet.Trainart_trn_max_no_new_neuron_set
    __swig_getmethods__["trn_max_no_new_neuron"] = _neuralnet.Trainart_trn_max_no_new_neuron_get
    if _newclass:
        trn_max_no_new_neuron = _swig_property(_neuralnet.Trainart_trn_max_no_new_neuron_get, _neuralnet.Trainart_trn_max_no_new_neuron_set)
    __swig_setmethods__["trn_max_neurons_rate"] = _neuralnet.Trainart_trn_max_neurons_rate_set
    __swig_getmethods__["trn_max_neurons_rate"] = _neuralnet.Trainart_trn_max_neurons_rate_get
    if _newclass:
        trn_max_neurons_rate = _swig_property(_neuralnet.Trainart_trn_max_neurons_rate_get, _neuralnet.Trainart_trn_max_neurons_rate_set)
    __swig_setmethods__["trn_phase1"] = _neuralnet.Trainart_trn_phase1_set
    __swig_getmethods__["trn_phase1"] = _neuralnet.Trainart_trn_phase1_get
    if _newclass:
        trn_phase1 = _swig_property(_neuralnet.Trainart_trn_phase1_get, _neuralnet.Trainart_trn_phase1_set)
    __swig_setmethods__["trn_phase2"] = _neuralnet.Trainart_trn_phase2_set
    __swig_getmethods__["trn_phase2"] = _neuralnet.Trainart_trn_phase2_get
    if _newclass:
        trn_phase2 = _swig_property(_neuralnet.Trainart_trn_phase2_get, _neuralnet.Trainart_trn_phase2_set)
    __swig_setmethods__["trn_phase3"] = _neuralnet.Trainart_trn_phase3_set
    __swig_getmethods__["trn_phase3"] = _neuralnet.Trainart_trn_phase3_get
    if _newclass:
        trn_phase3 = _swig_property(_neuralnet.Trainart_trn_phase3_get, _neuralnet.Trainart_trn_phase3_set)
    __swig_setmethods__["trn_initial_radius"] = _neuralnet.Trainart_trn_initial_radius_set
    __swig_getmethods__["trn_initial_radius"] = _neuralnet.Trainart_trn_initial_radius_get
    if _newclass:
        trn_initial_radius = _swig_property(_neuralnet.Trainart_trn_initial_radius_get, _neuralnet.Trainart_trn_initial_radius_set)
    __swig_setmethods__["trn_radius_factor"] = _neuralnet.Trainart_trn_radius_factor_set
    __swig_getmethods__["trn_radius_factor"] = _neuralnet.Trainart_trn_radius_factor_get
    if _newclass:
        trn_radius_factor = _swig_property(_neuralnet.Trainart_trn_radius_factor_get, _neuralnet.Trainart_trn_radius_factor_set)
    __swig_setmethods__["trn_opt_radius_strategy"] = _neuralnet.Trainart_trn_opt_radius_strategy_set
    __swig_getmethods__["trn_opt_radius_strategy"] = _neuralnet.Trainart_trn_opt_radius_strategy_get
    if _newclass:
        trn_opt_radius_strategy = _swig_property(_neuralnet.Trainart_trn_opt_radius_strategy_get, _neuralnet.Trainart_trn_opt_radius_strategy_set)
    __swig_setmethods__["trn_class_strategy"] = _neuralnet.Trainart_trn_class_strategy_set
    __swig_getmethods__["trn_class_strategy"] = _neuralnet.Trainart_trn_class_strategy_get
    if _newclass:
        trn_class_strategy = _swig_property(_neuralnet.Trainart_trn_class_strategy_get, _neuralnet.Trainart_trn_class_strategy_set)
    __swig_setmethods__["trn_perf"] = _neuralnet.Trainart_trn_perf_set
    __swig_getmethods__["trn_perf"] = _neuralnet.Trainart_trn_perf_get
    if _newclass:
        trn_perf = _swig_property(_neuralnet.Trainart_trn_perf_get, _neuralnet.Trainart_trn_perf_set)
    __swig_setmethods__["val_perf"] = _neuralnet.Trainart_val_perf_set
    __swig_getmethods__["val_perf"] = _neuralnet.Trainart_val_perf_get
    if _newclass:
        val_perf = _swig_property(_neuralnet.Trainart_val_perf_get, _neuralnet.Trainart_val_perf_set)
    __swig_setmethods__["tst_perf"] = _neuralnet.Trainart_tst_perf_set
    __swig_getmethods__["tst_perf"] = _neuralnet.Trainart_tst_perf_get
    if _newclass:
        tst_perf = _swig_property(_neuralnet.Trainart_tst_perf_get, _neuralnet.Trainart_tst_perf_set)
    __swig_setmethods__["trn_accuracy"] = _neuralnet.Trainart_trn_accuracy_set
    __swig_getmethods__["trn_accuracy"] = _neuralnet.Trainart_trn_accuracy_get
    if _newclass:
        trn_accuracy = _swig_property(_neuralnet.Trainart_trn_accuracy_get, _neuralnet.Trainart_trn_accuracy_set)
    __swig_setmethods__["trn_sp"] = _neuralnet.Trainart_trn_sp_set
    __swig_getmethods__["trn_sp"] = _neuralnet.Trainart_trn_sp_get
    if _newclass:
        trn_sp = _swig_property(_neuralnet.Trainart_trn_sp_get, _neuralnet.Trainart_trn_sp_set)
    __swig_setmethods__["val_accuracy"] = _neuralnet.Trainart_val_accuracy_set
    __swig_getmethods__["val_accuracy"] = _neuralnet.Trainart_val_accuracy_get
    if _newclass:
        val_accuracy = _swig_property(_neuralnet.Trainart_val_accuracy_get, _neuralnet.Trainart_val_accuracy_set)
    __swig_setmethods__["val_sp"] = _neuralnet.Trainart_val_sp_set
    __swig_getmethods__["val_sp"] = _neuralnet.Trainart_val_sp_get
    if _newclass:
        val_sp = _swig_property(_neuralnet.Trainart_val_sp_get, _neuralnet.Trainart_val_sp_set)
    __swig_setmethods__["tst_accuracy"] = _neuralnet.Trainart_tst_accuracy_set
    __swig_getmethods__["tst_accuracy"] = _neuralnet.Trainart_tst_accuracy_get
    if _newclass:
        tst_accuracy = _swig_property(_neuralnet.Trainart_tst_accuracy_get, _neuralnet.Trainart_tst_accuracy_set)
    __swig_setmethods__["tst_sp"] = _neuralnet.Trainart_tst_sp_set
    __swig_getmethods__["tst_sp"] = _neuralnet.Trainart_tst_sp_get
    if _newclass:
        tst_sp = _swig_property(_neuralnet.Trainart_tst_sp_get, _neuralnet.Trainart_tst_sp_set)

    def set_art(self, arg2):
        return _neuralnet.Trainart_set_art(self, arg2)

    def get_art(self):
        return _neuralnet.Trainart_get_art(self)

    def get_trninfo(self):
        return _neuralnet.Trainart_get_trninfo(self)

    def set_iomgr(self, mgr):
        return _neuralnet.Trainart_set_iomgr(self, mgr)

    def get_iomgr(self):
        return _neuralnet.Trainart_get_iomgr(self)
    __swig_destroy__ = _neuralnet.delete_Trainart
    __del__ = lambda self: None
Trainart_swigregister = _neuralnet.Trainart_swigregister
Trainart_swigregister(Trainart)

# This file is compatible with both classic and new-style classes.


